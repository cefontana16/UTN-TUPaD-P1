"""1)Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario"""

#Funci√≥n que calcula el factorial
def factorial(num):
    if num == 0:
        return 1
    else:
        return factorial(num-1) * num

print("\n---Calcula el factorial desde 1 hasta el n√∫mero que ingresas---\n")  
#Programa principal
#Se solicita al usuario que ingrese un n√∫mero
numero = int(input("Ingrese un n√∫mero: "))

#Se llama a la funci√≥n factorial con el n√∫mero ingresado como par√°metro
print (factorial(numero))



"""2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique."""

#Se crea la funci√≥n fibonacci
def fibonacci_rec(pos):
    if pos == 0:
        return 0
    elif pos == 1:
        return 1
    else:
        return fibonacci_rec(pos-1) + fibonacci_rec(pos-2)
    
#Programa principal    
#Se solicita al usuario hsta que posici√≥n quiere llegar
n = int(input("\nIngresa la posici√≥n de la serie Fibonacci hasta la cual quieres ver: "))

#Se muestra por pantalla la serie fibonacci
print(f"\nSerie de Fibonacci hasta la posici√≥n: {n}.")
for i in range(n + 1): 
    print(f"\nLa posici√≥n {i} = {fibonacci_rec(i)} en fibonacci")  


"""3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1)
. Prueba esta funci√≥n en un
algoritmo general."""

#Definir funci√≥n recursiva
def potencia(n, m):
    if m == 0:
        return 1
    else: 
        return n * potencia(n, m-1)

#Programa principal  
print("\n---Calcula la potencia de un n√∫mero:---\n")  
#Se solicitan la base y potencia al usuario
n = int(input("Ingresa la base: "))
m = int(input("ingrese la potencia: "))
#Se realiza el calculo de potencia
res_potencia = potencia (n, m)
#Se muestra el resultado por pantalla
print (f"\nLa potencia de {n} elevado a {m} es: {res_potencia}")



"""4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto.
Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y
unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este
procedimiento:
1. Dividir el n√∫mero por 2.
2. Guardar el resto (0 o 1).
3. Repetir el proceso con el cociente hasta que llegue a 0.
4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

Ejemplo: 
Convertir el n√∫mero 10 a binario: 
10 √∑ 2 = 5     resto: 0   
 5 √∑ 2 = 2     resto: 1   
 2 √∑ 2 = 1     resto: 0   
 1 √∑ 2 = 0     resto: 1   
Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010". """

#Se define la funci√≥n recursiva
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

#Programa principal   
print("\n---Pasar un n√∫mero decimal a binario---")
#Se solicitan los datos al usuario y se imprime por pantalla el resultado
numero = int(input("\nIngresa un n√∫mero entero positivo: "))
if numero == 0:
    print("\nEl n√∫mero binario es: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"\nEl n√∫mero binario es: {binario}")

"""5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una 
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no 
lo es. 
     Requisitos: 
La soluci√≥n debe ser recursiva. 
No se debe usar [::-1] ni la funci√≥n reversed(). """

#Funci√≥n recursiva
def es_palindromo(palabra):
    # Caso base: si la palabra tiene 0 o 1 letra, es pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Comparar la primera y la √∫ltima letra
    if palabra[0] != palabra[-1]:
        return False
    # Llamada recursiva con la palabra sin la primera y la √∫ltima letra
    return es_palindromo(palabra[1:-1])

#Programa principal
print("\n---Veamos si una palabra es palindromo---")
#Se solicitan ingreso de datos y se imprime por pantalla
palabra_ingresada = input("\nIngresa una cadena de texto sin expacios ni tilde: ").lower()
if es_palindromo(palabra_ingresada):
    print("\nEs palindromo")
else:
    print("\nNo es palindromo")



"""6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
     Restricciones: 
No se puede convertir el n√∫mero a string. 
Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
Ejemplos: 
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
suma_digitos(9)      ‚Üí 9 
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5) """

#Se define la funci√≥n recursiva
def suma_digitos(n):
    if n < 10:
        return n
    else:
        return n % 10 + suma_digitos(n //10)
    
#Programa principal
print("\n---Suma de d√≠gitos---")
#Se solicitan datos al usuario y se muestra resultado por pantalla
numero = int(input("\nPor favor ingrese un n√∫mero positivo para sumar sus d√≠gitos : "))
if numero >= 0:
    print(f"\nLa suma de los d√≠gitos es {suma_digitos(numero)}")
else:
    print("\nIngrese un n√∫mero positivo")



"""7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n 
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
√∫ltimo nivel con un solo bloque. 
 
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la 
pir√°mide. 
 
      Ejemplos: 
contar_bloques(1)   ‚Üí 1         (1) 
contar_bloques(2)   ‚Üí 3         (2 + 1) 
contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1) """

#Definir funci√≥n recursiva
def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return contar_bloques(n -1) + n
    
#Programa principal
print("\n---Contar bloques de una pir√°mide---")
#Se solicitan datos al cliente y se muestra resultados por pantalla
nivel = (int(input("Ingrese la cantidad de niveles o pisos de la pir√°mide: ")))
print (f"La pir√°mide con {nivel} niveles tiene {contar_bloques(nivel)} bloques")
    

"""8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un 
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero. 
Ejemplos: 
contar_digito(12233421, 2)   ‚Üí 3  
contar_digito(5555, 5)       ‚Üí 4   
contar_digito(123456, 7)     ‚Üí 0  """

#Funci√≥n recursiva
def contar_digito(numero, digito):
        if numero == 0:
            return 0
        else:
           ultimo_num = numero % 10
           if ultimo_num == digito:
            return 1 + contar_digito (numero // 10, digito) 
           else:
            return contar_digito (numero // 10, digito)

#Programa principal
print("\n---Contar cuantas veces se repite un d√≠gito dentro de un n√∫mero---")
#Ingreso de datos y se muestra resultado por pantalla
numero = int(input("\nIngrese un n√∫mero positivo: "))
digito = int(input("Ingrese el d√≠gito para ver cuantas veces aparece en el n√∫mero ingresado: "))
print(f"\nEl n√∫mero ingresado tiene {contar_digito(numero, digito)} veces el n√∫mero {digito}") 
